Lexeme: void, Token: void
Lexeme: main, Token: main
Lexeme: (, Token: open_parenthesis
Lexeme: ), Token: close_parenthesis
Lexeme: {, Token: Open_curly
Lexeme: int, Token: int
Lexeme: a, Token: id
Lexeme: ,, Token: comma
Lexeme: b, Token: id
Lexeme: ,, Token: comma
Lexeme: c, Token: id
Lexeme: ;, Token: semi_colon
Lexeme: a, Token: id
Lexeme: =, Token: assign_op
Lexeme: b, Token: id
Lexeme: ++, Token: inc
Lexeme: +, Token: arithmetic_add
Lexeme: 10, Token: Int_Literal
Lexeme: ;, Token: semi_colon
Lexeme: char, Token: char
Lexeme: x, Token: id
Lexeme: =, Token: assign_op
Lexeme: 'c', Token: Char
Lexeme: ;, Token: semi_colon
Lexeme: if, Token: if
Lexeme: (, Token: open_parenthesis
Lexeme: a, Token: id
Lexeme: <, Token: less_op
Lexeme: b, Token: id
Lexeme: ||, Token: logical_OR
Lexeme: b, Token: id
Lexeme: ==, Token: relational_eq
Lexeme: 20.5, Token: float_point
Lexeme: ), Token: close_parenthesis
Lexeme: {, Token: Open_curly
Lexeme: string, Token: id
Lexeme: v, Token: id
Lexeme: =, Token: assign_op
Lexeme: "Welcome", Token: String
Lexeme: ;, Token: semi_colon
Lexeme: }, Token: close_curly
