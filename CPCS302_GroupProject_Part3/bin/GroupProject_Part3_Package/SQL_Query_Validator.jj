/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(SQL_Query_Validator)
package GroupProject_Part3_Package;

public class SQL_Query_Validator
{
  public static void main(String args []) throws ParseException
  {
    SQL_Query_Validator parser = new SQL_Query_Validator(System.in);

        System.out.println("Enter any query:");
        try {
            parser.query();
            System.out.println("Valid SQL Query");
        } catch (ParseException e) {
            System.out.println("Invalid SQL Query: " + e.getMessage());
        }
  }
}

PARSER_END(SQL_Query_Validator)


SKIP : {
    " " | "\t" | "\n" | "\r"
}

TOKEN : {
    < SELECT : "SELECT" >
  | < FROM : "FROM" >
  | < WHERE : "WHERE" >
  | < INSERT : "INSERT" >
  | < INTO : "INTO" >
  | < VALUES : "VALUES" >
  | < UPDATE : "UPDATE" >
  | < SET : "SET" >
  | < DELETE : "DELETE" >
  | < COMMA : "," >
  | < LPARENTHESIS : "(" >
  | < RPARENTHESIS : ")" >
  | < EQUAL : "=" >
}


TOKEN : {
    < IDENTIFIER : (["a"-"z", "A"-"Z"])+ > // identifier with one or more letters
}

TOKEN : {
    < VALUE : (["0"-"9"]) + | ("'" (~["'"])* "'") > // integer or string in single quotes
}

void query() :
{}
{
    [selectQuery() | insertQuery() | updateQuery() | deleteQuery()]";"
}

void selectQuery() :
{}
{
    <SELECT> columnList() <FROM> <IDENTIFIER> [ <WHERE> condition() ]
}

void insertQuery() : 
{}
{
    <INSERT> <INTO> <IDENTIFIER> <LPARENTHESIS> columnList() <RPARENTHESIS>
    <VALUES> <LPARENTHESIS> valueList() <RPARENTHESIS>
}

void updateQuery() :
{}
{
    <UPDATE> <IDENTIFIER> <SET> assignmentList() [ <WHERE> condition() ]
}

void deleteQuery() :
{}
{
    <DELETE> <FROM> <IDENTIFIER> [ <WHERE> condition() ]
}

void columnList() :
{}
{
    <IDENTIFIER> ( <COMMA> <IDENTIFIER> )*
}

void valueList() :
{}
{
    <VALUE> ( <COMMA> <VALUE> )*
}

void assignmentList() :
{}
{
    <IDENTIFIER> <EQUAL> <VALUE> ( <COMMA> <IDENTIFIER> <EQUAL> <VALUE> )*
}

void condition() :
{}
{
    <IDENTIFIER> <EQUAL> <VALUE>
}